version: "3.8"

services:
  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: batch-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - observability

  # Loki for logs
  loki:
    image: grafana/loki:latest
    container_name: batch-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - observability

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: batch-tempo
    user: "0:0"  # Run as root to avoid permission issues
    ports:
      - "3200:3200"     # Tempo HTTP
      - "4319:4317"     # OTLP gRPC receiver (mapped to avoid conflict)
      - "4320:4318"     # OTLP HTTP receiver (mapped to avoid conflict)
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    networks:
      - observability

  # Mimir for metrics (alternative to Prometheus for long-term storage)
  mimir:
    image: grafana/mimir:latest
    container_name: batch-mimir
    user: "0:0"  # Run as root to avoid permission issues
    ports:
      - "9009:9009"
    command: [
      "-config.file=/etc/mimir.yaml",
      "-target=all,alertmanager",
      "-server.http-listen-port=9009",
      "-server.grpc-listen-port=9095"
    ]
    volumes:
      - ./docker/mimir/mimir.yaml:/etc/mimir.yaml
      - mimir_data:/data
    networks:
      - observability

  # Prometheus for metrics collection (can work alongside Mimir)
  prometheus:
    image: prom/prometheus:latest
    container_name: batch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - observability

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: batch-otel-collector
    ports:
      - "4317:4317"     # OTLP gRPC receiver
      - "4318:4318"     # OTLP HTTP receiver
      - "8888:8888"     # Prometheus metrics
      - "8889:8889"     # Prometheus exporter metrics
    volumes:
      - ./docker/otel/otel-collector-config.yaml:/etc/otelcol-contrib/otel-collector-config.yaml
    command: ["--config=/etc/otelcol-contrib/otel-collector-config.yaml"]
    depends_on:
      - tempo
      - loki
      - prometheus
    networks:
      - observability

volumes:
  grafana_data:
  loki_data:
  tempo_data:
  mimir_data:
  prometheus_data:

networks:
  observability:
    external: true
    name: batch_observability
